<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Zotero" script:language="StarBasic">
Declare Function FindWindow Lib &quot;user32&quot; Alias _
    &quot;FindWindowA&quot; (ByVal lpClassName As String, ByVal lpWindowName _
    As String) As Long
Declare Function SendMessage Lib &quot;user32&quot; Alias _
    &quot;SendMessageA&quot; (ByVal hwnd As Long, ByVal wMsg As Long, ByVal _
    wParam As Long, ByVal lParam As Long) As Long
Declare Function SetForegroundWindow Lib &quot;user32&quot; _
	(ByVal hwnd As Long) As Long
Declare Sub CopyMemoryToPtr Lib &quot;kernel32.dll&quot; Alias &quot;RtlMoveMemory&quot; _
    (ByVal lDest As Long, Source As Any, ByVal Length As Long)
Declare Function VirtualFree Lib &quot;kernel32&quot; (ByVal lpAddr As Long, _
    ByVal lSize As Long, ByVal dwFreeType As Long) As Long
Declare Function VirtualAlloc Lib &quot;kernel32&quot; _
    (ByVal lpAddr As Long, ByVal lSize As Long, ByVal _
    flAllocationType As Long, ByVal flProtect As Long) As Long

Private Const WM_COPYDATA = &amp;H4A
Private Const MEM_COMMIT = &amp;H1000
Private Const MEM_RELEASE = &amp;H8000
Private Const PAGE_READWRITE = 4
    
Sub ZoteroAddBibliography()
	Call ZoteroCommand(&quot;addBibliography&quot;, False)
End Sub

Sub ZoteroAddCitation()
	Call ZoteroCommand(&quot;addCitation&quot;, True)
End Sub

Sub ZoteroEditCitation()
	Call ZoteroCommand(&quot;editCitation&quot;, True)
End Sub

Sub ZoteroEditBibliography()
	Call ZoteroCommand(&quot;editBibliography&quot;, True)
End Sub

Sub ZoteroRefresh()
	Call ZoteroCommand(&quot;refresh&quot;, False)
End Sub

Sub ZoteroRemoveCodes()
	Call ZoteroCommand(&quot;removeCodes&quot;, False)
End Sub

Sub ZoteroSetDocPrefs()
	Call ZoteroCommand(&quot;setDocPrefs&quot;, True)
End Sub

Sub ZoteroNotFound()
	MsgBox(&quot;OpenOffice could not communicate with Zotero. Please ensure Firefox is open and try again.&quot;, MB_ICONSTOP)
End Sub

Sub ZoteroCommand(cmd As String, bringToFront As Boolean)
	Dim EnvironTest As String
	EnvironTest = Environ(&quot;OS&quot;)
	If EnvironTest &lt;&gt; &quot;&quot; Then
		&apos; On Windows
		Dim ThWnd As Long, buf As Long, buf2 As Long, cds As Long, tmp As Long, _
			tmp2 As Long, a$ As String, totalLen As Long, sfa
		
		&apos; Find Firefox message window
		Dim appNames(4)
		appNames(1) = &quot;Firefox&quot;
		appNames(2) = &quot;Zotero&quot;
		appNames(3) = &quot;Browser&quot;
		appNames(4) = &quot;Minefield&quot;
		For i = 1 To 4
			ThWnd = FindWindow(appNames(i) &amp; &quot;MessageWindow&quot;, &quot;&quot;)
			If ThWnd &lt;&gt; 0 Then
				Exit For
			End If
		Next
		If ThWnd = 0 Then
			ZoteroNotFound()
			Exit Sub
		End If
		
		&apos; Bring to front if desired
		If bringToFront Then Call SetForegroundWindow(ThWnd)
		
		&apos; Pass command-line args
		a$ = &quot;firefox.exe -silent -ZoteroIntegrationAgent OpenOffice -ZoteroIntegrationCommand &quot; &amp; cmd
		buf = VirtualAlloc(0, 255, MEM_COMMIT, PAGE_READWRITE)
		Call CopyMemoryToPtr(buf, a$, Len(a$))
		totalLen = Len(a$)
		a$ = &quot;C:\&quot;
		Call CopyMemoryToPtr(buf+totalLen+1, a$, Len(a$))
		totalLen = totalLen+Len(a$)+1
		cds = VirtualAlloc(0, 12, MEM_COMMIT, PAGE_READWRITE)
		
		&apos; Copy into COPYDATASTRUCT
		tmp = 1
		Call CopyMemoryToPtr(cds, tmp, 4)
		tmp2 = totalLen + 1
		Call CopyMemoryToPtr(cds + 4, tmp2, 4)
		Call CopyMemoryToPtr(cds + 8, buf, 4)
		
		&apos; Send message
		Call SendMessage(ThWnd, WM_COPYDATA, 0, cds)
		
		&apos; Free allocated memory
		Call VirtualFree(buf, 0, MEM_RELEASE)
		Call VirtualFree(cds, 0, MEM_RELEASE)
	Else
		&apos; On another platform
		sfa = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
		On Error GoTo NotFound
		
		&apos; For Zotero &gt; 2.0 on OS X
		path$ = &quot;/Users/Shared/.zoteroIntegrationPipe_&quot; &amp; Environ(&quot;LOGNAME&quot;)
		On Error GoTo ClearPath
		sfa.getSize(&quot;file://&quot; &amp; path$)
		On Error GoTo 0
		
		&apos; For Zotero &lt;= 2.0 on *NIX or OS X
		If path$ = &quot;&quot; Then
			path$ = Environ(&quot;HOME&quot;) &amp; &quot;/.zoteroIntegrationPipe&quot;
			On Error GoTo ClearPath
			sfa.getSize(&quot;file://&quot; &amp; path$)
			On Error GoTo 0
		End If
		
		If path$ = &quot;&quot; Then
			GoTo NotFound
		End If
		
		Shell &quot;bash -c &quot;&quot;echo &apos;OpenOffice &quot; &amp; cmd &amp; &quot;&apos; &gt; '&quot; &amp; path$ &amp; &quot;'&quot;&quot;&quot;
		Exit Sub
		
		ClearPath:
			path$ = &quot;&quot;
			Resume Next
		NotFound:
			ZoteroNotFound()
	End If
End Sub
</script:module>